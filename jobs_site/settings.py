"""
Django settings for jobs_site project.

Generated by 'django-admin startproject' using Django 4.2.3.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""
import logging
import logging.config
import os
import sys
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.

BASE_DIR = Path(__file__).resolve().parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ['SECRET_KEY']

LINKEDIN_EMAIL = None
if 'LINKEDIN_EMAIL' in os.environ:
    LINKEDIN_EMAIL = os.environ['LINKEDIN_EMAIL']

LINKEDIN_PASSWORD = None
if 'LINKEDIN_PASSWORD' in os.environ:
    LINKEDIN_PASSWORD = os.environ['LINKEDIN_PASSWORD']

AJAX = None
if 'AJAX' in os.environ:
    AJAX = os.environ['AJAX']

LI_AT = None
if 'LI_AT' in os.environ:
    LI_AT = os.environ['LI_AT']

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

LOG_LOCATION = os.environ['LOG_LOCATION'] if 'LOG_LOCATION' in os.environ else None
if LOG_LOCATION is None:
    LOG_LOCATION = f"{Path(__file__).resolve().parent.parent}/logs"

DJANGO_SETTINGS_LOG_HANDLER_NAME = "linkedin_jobs"

from jobs.setup_logger import Loggers

Loggers.get_logger()

ALLOWED_HOSTS = ["127.0.0.1", "linkedinjobs.modernneo.com"]

CSRF_TRUSTED_ORIGINS = ["http://127.0.0.1", "https://linkedinjobs.modernneo.com"]

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'jobs',
    'rest_framework'
]

REST_FRAMEWORK = {
    # Use Django's standard `django.contrib.auth` permissions,
    # or allow read-only access for unauthenticated users.
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.DjangoModelPermissionsOrAnonReadOnly'
    ]
}

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'jobs_site.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates']
        ,
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'jobs_site.wsgi.application'

# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases
if os.environ['ENV'] == "PROD":
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.postgresql',
            'NAME': os.environ['POSTGRES_DB'],
            'USER': os.environ['POSTGRES_USER'],
            'PASSWORD': os.environ['POSTGRES_PASSWORD'],
            'HOST': f"{os.environ['COMPOSE_PROJECT_NAME']}_db",
            "PORT": "5432",
        }
    }
else:
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': BASE_DIR.parent / 'db.sqlite3',
        }
    }


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

MEDIA_URL = '/MEDIA_URL/'
MEDIA_ROOT = BASE_DIR.parent / 'media'
CSV_ROOT = f"{MEDIA_ROOT}/linkedin_exports"
print(f'[settings.py] MEDIA_URL set to {MEDIA_URL}')
print(f'[settings.py] MEDIA_ROOT set to {MEDIA_ROOT}')
print(f'[settings.py] CSV_ROOT set to {CSV_ROOT}')


# Loggers.setup_sys_stream_logger()

LOGGING_CONFIG = None

logging.config.dictConfig({
    'version': 1,
    'disable_existing_loggers': False,
    'filters': {
        'require_debug_false': {
            '()': 'django.utils.log.RequireDebugFalse',
        },
        'require_debug_true': {
            '()': 'django.utils.log.RequireDebugTrue',
        },
    },
    'formatters': {
        'django.server': {
            '()': 'django.utils.log.ServerFormatter',
            'format': '[{server_time}] {message}',
            'style': '{',
        }
    },
    'handlers': {
        'info_handler': {
            'level': 'INFO',
            'filters': ['require_debug_true'],
            'class': 'jobs.setup_logger.CSSSDebugStreamHandler',
            "stream": sys.__stdout__  # setting this up manually because this specific property had to be changed,
            # and I was too lazy to figure out how to customize this via
            # https://docs.djangoproject.com/en/4.1/topics/logging/#configuring-logging
        },
        'error_handler': {
            'level': 'ERROR',
            'filters': ['require_debug_true'],
            'class': 'logging.StreamHandler',
            "stream": sys.__stderr__  # setting this up manually because this specific property had to be changed,
            # and I was too lazy to figure out how to customize this via
            # https://docs.djangoproject.com/en/4.1/topics/logging/#configuring-logging
        },
        'django.server': {
            'level': 'INFO',
            'class': 'logging.StreamHandler',
            "stream": sys.__stdout__,  # setting this up manually because this specific property had to be changed,
            # and I was too lazy to figure out how to customize this via
            # https://docs.djangoproject.com/en/4.1/topics/logging/#configuring-logging
            'formatter': 'django.server',
        },
        'mail_admins': {
            'level': 'ERROR',
            'filters': ['require_debug_false'],
            'class': 'django.utils.log.AdminEmailHandler',
        }
    },
    'loggers': {
        'django': {
            'handlers': ['info_handler', 'error_handler', 'mail_admins'],
            'level': 'INFO',
        },
        'django.server': {
            'handlers': ['django.server'],
            'level': 'INFO',
            'propagate': False,
        },
    }
})

print("settings.py finished")